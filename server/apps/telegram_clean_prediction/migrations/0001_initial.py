# Generated by Django 4.2.5 on 2024-04-02 20:08

import django.db.models.deletion
import rules.contrib.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('index', models.SmallIntegerField(verbose_name='Порядковый номер в колоде')),
                ('group_type', models.CharField(choices=[('major_arcana', 'Старшие арканы'), ('minor_arcana', 'Младшие арканы')], max_length=30, verbose_name='Тип группы')),
                ('suit_type', models.CharField(choices=[('wands', 'Жезлы'), ('cups', 'Кубки'), ('swords', 'Мечи'), ('pentacles', 'Пентакли')], max_length=30, verbose_name='Тип масти')),
                ('image', models.CharField(verbose_name='Изображение')),
                ('name', models.CharField(verbose_name='Название')),
                ('description', models.JSONField(verbose_name='Описание')),
                ('deck_type', models.CharField(choices=[('rider_waite_tarot', 'Таро Райдера — Уэйта')], max_length=30, verbose_name='Тип колоды')),
            ],
            options={
                'verbose_name': 'Карта',
                'verbose_name_plural': 'Карты',
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('tg_user_id', models.BigIntegerField(unique=True, verbose_name='Id пользователя в telegram')),
                ('tg_user_username', models.CharField(blank=True, verbose_name='Никнейм пользователя')),
                ('tg_user_first_name', models.CharField(blank=True, max_length=255, verbose_name='Имя пользователя')),
                ('tg_user_last_name', models.CharField(blank=True, max_length=255, verbose_name='Фамилия пользователя')),
                ('tg_user_is_premium', models.BooleanField(blank=True, null=True, verbose_name='Наличие премиум-аккаунта')),
                ('tg_user_language_code', models.CharField(blank=True, verbose_name='Язык пользователя')),
                ('privileges', models.CharField(choices=[('standard', 'Стандартные'), ('premium', 'Премиальные'), ('missing', 'Отсутствуют')], default='standard', verbose_name='Привилегии')),
            ],
            options={
                'verbose_name': 'Клиент бота',
                'verbose_name_plural': 'Клиенты бота',
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('type_layout', models.CharField(verbose_name='Тип расклада')),
                ('question', models.TextField(blank=True, verbose_name='Вопрос')),
                ('is_accurate', models.BooleanField(null=True, verbose_name='Точный расклад')),
                ('is_doubtful', models.BooleanField(null=True, verbose_name='Сомнительный расклад')),
                ('is_like', models.BooleanField(null=True, verbose_name='Расклад нравится')),
                ('is_not_like', models.BooleanField(null=True, verbose_name='Расклад не нравится')),
            ],
            options={
                'verbose_name': 'Расклад',
                'verbose_name_plural': 'Расклады',
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LayoutCards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layout_cards', to='telegram_clean_prediction.card', verbose_name='Карта')),
                ('layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layout_cards', to='telegram_clean_prediction.layout', verbose_name='Расклад')),
            ],
            options={
                'verbose_name': 'Карты, участвующие в раскладе',
                'verbose_name_plural': 'Карты, участвующие в раскладе',
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='layout',
            name='cards',
            field=models.ManyToManyField(related_name='layouts', through='telegram_clean_prediction.LayoutCards', to='telegram_clean_prediction.card', verbose_name='Карты'),
        ),
        migrations.AddField(
            model_name='layout',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='telegram_clean_prediction.client', verbose_name='Клиент'),
        ),
    ]
